#!/usr/bin/env ruby

require "fileutils"

puts "=== Installing homebrew bundle ==="
system "brew bundle", exception: true

def symlink(from, to)
  # print "Installing #{from} to #{to}... "
  from = File.expand_path("../#{from}", __dir__)
  to = File.expand_path(to)
  FileUtils.mkdir_p(File.dirname(to))
  if File.exist?(to)
    if File.directory?(from) || File.directory?(to)
      puts "Skipping #{to}, because I don't want to compare whole directories"
    elsif FileUtils.identical?(from, to)
      puts "Skipping #{to}, files are identical"
    else
      backup = "#{to}.bak"
      puts "Making backup of #{to} in #{backup}"
      FileUtils.copy_file(to, backup)
      FileUtils.ln_sf(from, to, verbose: true)
    end
  else
    FileUtils.ln_s(from, to, verbose: true)
  end
end

puts "=== Installing symlinks ==="

Dir["rc/*"].each do |f|
  symlink f, "~/.#{File.basename(f)}"
end

symlink "config/bundler",           "~/.bundle/config"
symlink "config/fish/config.fish",  "~/.config/fish/config.fish"
symlink "config/fish/functions",    "~/.config/fish/functions"
symlink "config/nvim",              "~/.config/nvim"
symlink "config/starship.toml",     "~/.config/starship.toml"
symlink "config/vim",               "~/.config/vim"
symlink "config/ghostty",           "~/.config/ghostty"
symlink "config/git",               "~/.config/git"
symlink "config/direnv",            "~/.config/direnv"
symlink "config/bat",               "~/.config/bat"
symlink "config/delta",             "~/.config/delta"

FileUtils.mkdir_p "~/.vim/undo", verbose: true
FileUtils.mkdir_p "~/.vim/swap", verbose: true
FileUtils.mkdir_p "~/.vim/tmp",  verbose: true

puts "=== Done! ==="
