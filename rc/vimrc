" This vimrc automatically installs everything it needs.
" To install, or reinstall, remove ~/.vim directory and open Vim.

set nocompatible
filetype off

" hacky way of disabling cucumber syntastic, it's too damn slow
let g:loaded_syntastic_cucumber_cucumber_checker = 1

let needsToInstallBundles=0
if !isdirectory(expand("~/.vim/bundle/Vundle.vim"))
  echo "\nInstalling Vim dependencies... Please be patient!\n"
  silent !mkdir -p ~/.vim/tmp
  silent !mkdir -p ~/.vim/swap
  silent !mkdir -p ~/.vim/undo
  silent !mkdir -p ~/.vim/bundle
  silent !mkfifo ~/.vim/commands-fifo
  silent !git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  let needsToInstallBundles=1
endif

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Do these first, because other plugins depend on them
Plugin 'VundleVim/Vundle.vim'
Plugin 'Syntastic'
Plugin 'tpope/vim-fugitive'

" Colorschemes
Plugin 'twerth/ir_black'
Plugin 'vim-scripts/tir_black'

" Syntax & Language Support
Plugin 'hail2u/vim-css3-syntax'
Plugin 'kchmck/vim-coffee-script'
Plugin 'othree/html5-syntax.vim'
Plugin 'slim-template/vim-slim'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-cucumber'
Plugin 'tpope/vim-haml'
Plugin 'vim-ruby/vim-ruby'
Plugin 'vim-scripts/VimClojure'
Plugin 'Keithbsmiley/rspec.vim'
Plugin 'elixir-lang/vim-elixir'

Plugin 'pangloss/vim-javascript'
Plugin 'isRuslan/vim-es6'
Plugin 'mxw/vim-jsx'
Plugin 'digitaltoad/vim-pug'
Plugin 'guns/vim-clojure-static'
Plugin 'tpope/vim-rails'

" Other
Plugin 'csexton/trailertrash.vim'
Plugin 'edsono/vim-matchit'
Plugin 'godlygeek/tabular'
Plugin 'kien/ctrlp.vim'
Plugin 'mileszs/ack.vim'
Plugin 'tomtom/tcomment_vim'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-vinegar'
Plugin 'michaeljsmith/vim-indent-object'
Plugin 'janko-m/vim-test'
Plugin 'luochen1990/rainbow'
Plugin 'jlanzarotta/bufexplorer'

" " Always last
" Plugin 'vim-airline/vim-airline'
" Plugin 'vim-airline/vim-airline-themes'

call vundle#end()
filetype plugin indent on

if needsToInstallBundles == 1
  echo "\nInstalling plugins.\n"
  :PluginInstall
  echo "\nInstalled.\n"
endif

filetype plugin indent on



" ==========================
" SETTINGS
" ==========================

if has("gui_macvim")
  set antialias                      " Pretty
  set guioptions=Ace                 " No menubar, toolbar or scrollbars, as minimal as possible
  set guifont=Hack:h14               " Get Hack here: http://sourcefoundry.org/hack/
  colorscheme ir_dark                " Pastel colors
  set fuoptions=maxvert,maxhorz      " Fixes Full Screen on OSX
  " If you are on OSX Lion, and you hate Lion's native full screen, turn it off for macvim:
  "   defaults write org.vim.MacVim MMNativeFullScreen 0
  " Press Ctrl+Cmd+F to go full screen

  " Those balloon things are annoying as hell
  set noballooneval
  set balloondelay=100000
  setlocal balloonexpr=
else
  colorscheme tir_black " Use Terminal version of ir_black
end

set vb t_vb=               " Turn off beep
set lazyredraw             " Don't redraw during macro execution
set synmaxcol=512          " Stop syntax highlighting for long lines
" set relativenumber         " Relative line numbering
set number                 " Relative line numbering
set nowrap                 " No wrapping by default
set scrolloff=4            " Keep a few lines above and below current line
set equalalways            " create equally sized splits
set splitbelow splitright  " split placement
" set wildmode=longest,list  " Makes completion in command mode like bash
set history=10000          " Keep a lot of stuff in history
set backup                 " Make backups
set backupdir=~/.vim/tmp/  " Keep backups in a central location
set directory=~/.vim/swap/ " Keep swap files in a central location
set undofile               " Keep undo history even after closing Vim
set undodir=~/.vim/undo    " Where to store undo history
set timeoutlen=500         " Don't wait so long for ambiguous leader keys
set noesckeys              " Get rid of the delay when hitting esc!
set gdefault               " assume the /g flag on :s substitutions to replace all matches in a line

" Indenting always 2 spaces, sorry Python
set cindent
set expandtab
set shiftwidth=2
set smartindent
set softtabstop=2
set tabstop=2

" Search
set smartcase
set hlsearch

let g:ruby_no_expensive = 0 " Differentiate between do..end and class..end is slow
let g:ruby_operators = 1    " Highlight Ruby operators
let g:ruby_indent_block_style = 'do'

let g:netrw_nobeval = 1

let g:ackprg = 'ag --nogroup --nocolor --column'

set formatprg=par\ -w80\ -q


" ==========================
" AUTOCOMMANDS
" ==========================

" When editing a file, always jump to the last known cursor position.
autocmd BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

" Format xml files
au FileType xml exe ":silent 1,$!xmllint --format --recover - 2>/dev/null"


" Add rainbows and unicorns
let g:rainbow_active = 1


let g:rainbow_conf = {
      \   'guifgs': ['lightblue', 'lightmagenta', 'cyan', 'lightyellow'],
      \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
      \   'operators': '_,_',
      \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
      \   'separately': {
      \       '*': {},
      \       'tex': {
      \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
      \       },
      \       'lisp': {
      \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
      \       },
      \       'vim': {
      \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
      \       },
      \       'html': {
      \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
      \       },
      \       'css': 0,
      \   }
      \}

" ==========================
" GENERAL KEY MAPPINGS
" ==========================

" Rename :W to :w
command! W :w

" Use OSX pbpaste/pbcopy for F1/F2, for use in terminal
nmap <F1> :set paste<cr>:r !pbpaste<cr>:set nopaste<cr>
imap <F1> <Esc>:set paste<cr>:r !pbpaste<cr>:set nopaste<cr>
nmap <F2> :.w !pbcopy<cr><cr>
vmap <F2> :w !pbcopy<cr><cr>

" in insert mode, jj goes to normal mode
" if you ever need to type jj for real, type it slowly, like on old school mobile phones
inoremap jj <ESC>

" Directly switch between open splitted windows
map <C-J> <C-W>j
map <C-H> <C-W>h
map <C-L> <C-W>l
map <C-K> <C-W>k

" pressing j or k in a long wrapped will put cursor down/up one visual line
nnoremap j gj
nnoremap k gk

" Shift+K becomes similar to Shift+J
nnoremap <S-k> kJ

" Remap return to clear search highlight
nnoremap <cr> :nohlsearch<cr>

" highlight the 100th character
" highlight ColorColumn ctermbg=magenta
" call matchadd('ColorColumn', '\%101v', 100)

" In normal mode, space will start command mode.
nnoremap <space> :e 
vnoremap <space> :e 

" Buffer Explorer opens with Ctrl+B
nnoremap <C-B> :BufExplorer<cr>

" %% will become the directory of the current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" Hooks up smart tab autocomplete behavior mentioned above
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" A common typo is ":E" when actually meaning ":e" and not ":Explore" or ":Errors".
cnoreabbrev E e

" Insert hex keys
inoremap <silent> <F12> <ESC>:r ! ruby -r securerandom -e "print SecureRandom.hex(32)"<CR>kJ

" ==========================
" LEADER KEYS
" ==========================

let mapleader = ","

" Map ,e and ,v to open files in the same directory as the current file
map <leader>e :edit %%
map <leader>v :view %%
map <leader>m :vsplit %%
map <leader>n :split %%


" Custom functions
map <leader>p :call PromoteToLet()<cr>

" Align = signs
nmap <Leader>a= :Tabularize /=<cr>
vmap <Leader>a= :Tabularize /=<cr>gv
" Align hashrockets
nmap <Leader>a> :Tabularize /=><cr>
vmap <Leader>a> :Tabularize /=><cr>gv
" Align commas
nmap <Leader>a, :Tabularize /,\zs/l1<cr>
vmap <Leader>a, :Tabularize /,\zs/l1<cr>gv
" Align words and fix indentation
nmap <Leader>aw :Tabularize /\s\+\zs/l1<cr>=ip
vmap <Leader>aw :Tabularize /\s\+\zs/l1<cr>gv=gv
" Align comments
nmap <Leader>ac :Tabularize /#<cr>
" Align blocks
nmap <Leader>a{ :Tabularize /{<cr>
vmap <Leader>a{ :Tabularize /{<cr>gv
vmap <Leader>a{ :Tabularize /{<cr>gv

" Fugitive (Git)
map <Leader><Leader>c :Gcommit<cr>
map <Leader><Leader>b :Gblame<cr>
map <Leader><Leader>s :Gstatus<cr>
map <Leader><Leader>w :Gwrite<cr>
map <Leader><Leader>p :Git push<cr>
map <Leader><Leader>f :Git fetch<cr>
map <Leader><Leader>u :Git up<cr>

" Open notes file
map <Leader>q :split ~/Dropbox/notes.md<cr>



" ==========================
" FUNCTIONS
" ==========================

" Smart tab autocomplete behavior
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction

" Convert local variable to RSpec let block
function! PromoteToLet()
  :normal! dd
  :exec '?^\s*describe\|fdescribe\|fcontext\|context\|RSpec\.describe\>'
  :normal! p
  :.s/\(\w\+\)\s\+=\s\+\(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction

" Aligns tables in cucumber, from tim pope: https://gist.github.com/tpope/287147
function! s:AlignCucumberTables()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" Only enable in cucumber
function! EnableCucumberTables()
  inoremap <silent> <Bar>   <Bar><Esc>:call <SID>AlignCucumberTables()<cr>a
endfunction
au FileType cucumber call EnableCucumberTables()

" Automatically align multiline hashes in Ruby (Ruby 1.9 syntax only).
function! AlignRubyHashes()
  " Only look for lines that start with a simple keyword, colon, space, and
  " ending in a comma.
  let p = '^\s*\w\+:\s.*,$'

  " Don't do anything if there is no Tabularize, or there is no surrounding
  " line that can be aligned with.
  if exists(':Tabularize') && (getline(line('.')) =~# '^\s*\w\+:\s$') && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    " save current position because later command moves the cursor
    let currentLine = line(".")
    let currentCol = col(".")

    call DoAlignRubyHashes()

    " Since the current line cannot be aligned yet when it is too short, find
    " a line to compare it with. This is either the previous line or the next
    " line.
    if (getline(currentLine-1) =~ p)
      let compareLine = currentLine - 1
    else
      let compareLine = currentLine + 1
    endif

    " Calculate how many spaces to add.
    let positionOfValues = strlen(matchstr(getline(compareLine), '^.*:\s\+'))
    let missingSpaces = (positionOfValues - currentCol) + 1

    " Add missing spaces
    if missingSpaces > 0
      exe currentLine.'s/$/'.repeat(' ', missingSpaces)
    endif

    " Set the cursor to the proper position
    call cursor(currentLine, currentCol + missingSpaces)

  endif
endfunction

function! DoAlignRubyHashes()
  let p = '^\s*\w\+:\s.*,$'

  " Calculate the range to act. Default Tabularize doesn't do this properly,
  " because the range is determined by a different regex than the alignment
  " regex.
  let from = line('.')
  while (getline(from - 1) =~ p)
    let from -= 1
  endwhile

  let to = line('.')
  while (getline(to + 1) =~ p)
    let to += 1
  endwhile

  " Call Tabularize with the new range
  exe from.','.to.'Tabularize/\(:.*\)\@<!\(:\s\)\zs/l1'
  normal! 0

endfunction

" Align after colons, but only the first one in the line,
" In normal mode, determine range automatically
nmap <Leader>a: :call DoAlignRubyHashes()<cr>
" In visual mode, the range is already fixed
vmap <Leader>a: :Tabularize/\(:.*\)\@<!:\zs/l1<cr>gv

" Syntastic configuration
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_echo_current_error = 1
" let g:syntastic_ruby_mri_exec = '~/.rbenv/shims/ruby'
let g:syntastic_ruby_mri_exec = '~/.rubies/ruby-2.3.1/bin/ruby'
let g:syntastic_enable_elixir_checker = 1
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "W"

let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{W:%w}]'
let g:syntastic_eruby_ruby_quiet_messages = {'regex': 'possibly useless use of a variable in void context'}

" Map prev and back mac shortcuts to traverse buffers
map <D-[> :bprevious<cr>
map <D-]> :bnext<cr>

" vim-test configuration
let test#strategy = "iterm"
let g:test#preserve_screen = 1
let test#ruby#rspec#executable = 'rspec_focus'
let test#ruby#cucumber#executable = 'cucumber_focus'
nmap <silent> <leader>t :w<CR>:TestFile<CR>
nmap <silent> <leader>T :w<CR>:TestNearest<CR>
nmap <silent> <leader>l :w<CR>:TestSuite --only-failures<CR>
nmap <silent> <leader>r :w<CR>:TestSuite<CR>
nmap <silent> <leader>g :TestVisit<CR>

set laststatus=2
set statusline=\ %f     " filename
set statusline+=%*\ %#warningmsg#
set statusline+=%m      " modified flag
set statusline+=%*      " reset styles
set statusline+=\ %r    " read only flag
set statusline+=%=      " go right
set statusline+=%y      " filetype
set statusline+=\ %v,   " cursor column
set statusline+=%l/%L   " cursor line/total lines
set statusline+=\ %#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
